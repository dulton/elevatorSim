All builds are classified as 3-tuples. The 3-tuple consists of the cpu architecture, the host 
operating system family, and the compiler name and version separated by periods. So, the major 
supported build for this project currently is (x86, winnt, msvc2010), or x86.winnt.msvc2010.

For tier one platforms, pre-cooked libraries are included in-tree and so building should be as easy
as invoking (n)make. For other platforms building is still possible but more work will be required.
Due to time constraints, an elaborate build system is a low priority item.

Dependencies:
    boost 1.51.0/boost 1.50
    fltk 1.3.0
    python 3.3

Tier one platforms: x86.winnt.msvc2010

to build for this T1 3-tuple, the easy way:

1. double click on elevatorSim.sln
2. click the green 'play button'
3. ???
4. rejoice

to build for this T1 3-tuple, the hard way:

1. first run vcvarsall.bat x86 from a shell, or just use (Visual Studio Command Prompt 2010 x86),
to ensure that the Microsoft compilers and binary utilities are in your PATH.

2. > cd [..]\elevatorSim,
to ensure that you are in the correct directory containing the source for this project.

3a. > nmake /nologo /f makefile.x86.winnt.msvc2010
to tell the shell to interpret the makefile metascript and issue commands required for compilation
and linking.

3b. alternately you can run build.bat which will simply invoke the command listed in 3a

if the build succeeds, the resulting statically linked binary will reside in the current directory.

Tier two platforms: x86_64 debian linux

To build on debian linux:

aptitude install libboost1.50-dev-all libfltk1.3-dev libfltk1.3-compat-headers
cd /path/to/elevatorSim
make -f makefile.x86_64.linux.gcc4

NOTES FOR BUILDING DEPENDENCIES ON WINDOWS ( You probably won't have to do this ):

Only 32 bit targets have been tested.
All compiles below assume vcvarsall x86.

BOOST:
   These are the proper options to set for building boost libraries for debugging:

   b2.exe --with-chrono --with-program_options --with-system --with-thread --with-test --with-date_time --variant=debug --threading=multi --link=static

   The two paths given at the end of a successful build are the paths you need to write into the makefile.

FLTK:
   Use the project file for MSVC10 located at fltk-1.xxx\ide\VisualC2010.
   Build the Win32/Debug target. 
   You will need to change the name of the pdb files output by the build for each library if you want to be able to debug
   the fltk routines. This can be done by right clicking on each library solution
      -> Configuration Properties
      -> C/C++
      -> Output Files
      -> Program Database File Name
      -> Change it to $(IntDir)_<name of library>d.pdb

   This needs to be done for: fltk, fltkdll, fltkforms, fltkgl, fltkimages, fltkjpeg, fltkpng, and fltkzlib
   Results will be in $TOP\lib. The pdbs will reside in the same directory as the solution file. You will need both.
   Refer to http://fltk.org for further documentation.

Python:
   Use the project file for MSVC10 locate at Python-3.xxx\PCbuild.
   Build the Win32/Debug target.
   Results will be in the solution directory.
   Refer to http://python.org/doc for further documentation.

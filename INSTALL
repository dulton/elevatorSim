    ________                __             _____ _         
   / ____/ /__ _   ______ _/ /_____  _____/ ___/(_)___ ___ 
  / __/ / / _ \ | / / __ `/ __/ __ \/ ___/\__ \/ / __ `__ \
 / /___/ /  __/ |/ / /_/ / /_/ /_/ / /   ___/ / / / / / / /
/_____/_/\___/|___/\__,_/\__/\____/_/   /____/_/_/ /_/ /_/ 

############################################################# 

All builds are classified as 3-tuples. The 3-tuple consists of the cpu architecture, the host 
operating system family, and the compiler name and version separated by periods. So, the major 
supported build for this project currently is (x86, winnt, msvc2010), or x86.winnt.msvc2010.

For tier one platforms, pre-cooked libraries are included in-tree and so building should be as easy
as invoking (n)make. For other platforms building is still possible but more work will be required.
Due to time constraints, an elaborate build system is a low priority item.

Also note that static linking is used whenever possible (for both boost and fltk) on windows,
where sane loadable library support is conscpicuously absent. On unixlike systems all 
linked libraries are imported dynamically.

The build files for each supported OS family are segregated by git branch. See below.

master:     winnt
osx_only:   darwin
linux_only: linux

Dependencies:
   Libraries:
      boost 1.50+ AND
      fltk 1.3.0+ AND
      python 3.1+
   Compilers:
      msvc2010+ OR
      gcc4.7+ OR
      clang3.3+   

Tier one platforms: x86.winnt.msvc2010

BUILDING ON WINDOWS:

1. double click on elevatorSim.sln
2. click the green 'play button'
3. ???
4. rejoice

to build for this T1 3-tuple, the hard way:

1. first run vcvarsall.bat x86 from a shell, or just use (Visual Studio Command Prompt 2010 x86),
to ensure that the Microsoft compilers and binary utilities are in your PATH.

2. > cd [..]\elevatorSim,
to ensure that you are in the correct directory containing the source for this project.

3a. > nmake /nologo /f makefile.x86.winnt.msvc2010
to tell the shell to interpret the makefile metascript and issue commands required for compilation
and linking.

3b. alternately you can run build.bat which will simply invoke the command listed in 3a

if the build succeeds, the resulting statically linked binary will reside in the current directory.

Tier two platforms: x86_64 debian linux

BUILDING ON DEBIAN LINUX:

git checkout linux_only

aptitude install libboost1.50-dev-all libfltk1.3-dev libfltk1.3-compat-headers
cd /path/to/elevatorSim
make -f makefile.x86_64.linux.gcc4

BUILDING ON OS X:

install sufficient versions of fltk, python3, and boost manually
cd /path/to/elevatorSim
make -f makefile.x86_64.darwing.clang3x

NOTE FOR BUILDING ON GENERIC UNIXES:

you may have to set (DY)LD_LIBRARY_PATH
